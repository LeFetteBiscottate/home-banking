openapi: 3.0.1
info:
  title: Swagger Home-Banking
  description: 'This is Home-Banking server.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://admin.swagger.io/v2
- url: http://admin.swagger.io/v2
tags:
- name: Card
  description: Everything about your Card
  externalDocs:
    description: Find out more
    url: http://swagger.io
paths:
  /card/{cardId}:
    get:  
      tags:
      - Card
      summary: Find Card by ID
      description: Returns a single Card
      operationId: getById
      parameters:
      - name: cardId
        in: path
        description: ID of Card to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/card'
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Card not found
          content: {}
      security:
      - api_key: []
  /card/{card_number}:
    get:  
      tags:
      - Card
      summary: Find Card by Card Number
      description: Returns a single Card
      operationId: getByCardNumber
      parameters:
      - name: card_number
        in: path
        description: ID of current account to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/card'
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Card not found
          content: {}
      security:
      - api_key: []
  /card/{card_type}:
    get:  
      tags:
      - Card
      summary: Find Card by Card Type (Master, Visa, AmericanExpress)
      description: Returns a List of Cards
      operationId: getByCardType
      parameters:
      - name: card_type
        in: path
        description: Type of cards
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/card'
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Account not found
          content: {}
      security:
      - api_key: []    
      
  /card/{accountId}:
    get:  
      tags:
      - Card
      summary: Find Card by AccountID
      description: Returns cards by related account Id
      operationId: getByAccountId
      parameters:
      - name: accountId   
        in: path
        description: ID of the account to return cards
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/card'
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: card not found
          content: {}
      security:
      - api_key: []    
  /card/{accountId}/{cardType}:
    get:  
      tags:
      - Card
      summary: Find Card by AccountID and cardType
      description: Returns cards by related account Id and type
      operationId: getByAccountIdAndType
      parameters:
      - name: accountId   
        in: path
        description: ID of the account to return cards
        required: true
        schema:
          type: integer
          format: int64
      - name: cardType   
        in: path
        description: type of the account to return cards
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/card'
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: card not found
          content: {}
      security:
      - api_key: []        
  /card:
    get:  
      tags:
      - Card
      summary: Find all the card
      description: Returns all the card
      operationId: getAll
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/card'
            application/json:
              schema:
                $ref: '#/components/schemas/card'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: cards not found
          content: {}
      security:
      - api_key: []
    #/card
    post:
      tags:
      - Card
      summary: Insert a card
      operationId: insert
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  description: added Card
      responses:
        405:
          description: Invalid input
          content: {}
        409:
          description: Il Card non presente nel DB
          content: {}
      security:
      - admin_auth:
        - write:users
        - read:users
      x-codegen-request-body-name: body            
  #/card:
    put:
      tags:
      - Card
      summary: Update an existing Card
      operationId: update
      requestBody:
        description: Card object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card'
          application/xml:
            schema:
              $ref: '#/components/schemas/card'
        required: true
      responses:
        400:
          description: Invalid parameters supplied
          content: {}
        404:
          description: Card not found
          content: {}
        405:
          description: Validation exception
          content: {}
        409:
          description: Card non presente ne DB
          content: {}  
      security:
      - admin_auth:
        - write:users
        - read:users
      x-codegen-request-body-name: body
  #/card:
    delete:
      tags:
      - Card
      summary: Deletes a Card
      operationId: delete
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: user not found
          content: {}
        409:
          description: Il Card non e presente nel DB
          content: {}  
      security:
      - admin_auth:
        - write:users
        - read:users

components:
  schemas:
    card:
      required:
      - id
      - card_number
      - circuit
      - expiry_date
      - balance
      - account_id
      - type
      - iban
      type: object
      properties:
        id:
          type: integer
          format: int64
        card_number:
          type: string
        ciruit:
          type: string
        expiery_date:
          type: string
        balance:
          type: number
        account_id:
          type: integer
          format: int64
        type:
          type: string
        iban:
          type: string
      xml:
        name: transaction
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    admin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://admin.swagger.io/oauth/dialog
          scopes:
            write:users: modify transaction
            read:users: read your transaction
    api_key:
      type: apiKey
      name: api_key
      in: header